# -*- coding: utf-8 -*-

from __future__ import unicode_literals, print_function

import inspect
import logging
import os
import signal
import time

import pymongo
import telegram
from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, ConversationHandler, RegexHandler
from telegram.ext import Updater, Filters

from clients import log_client
from google_calendar import dump_calendar, dump_mongodb, get_events, dump_calendar_event
from maps_api import get_coordinates
from wod import wod, wod_info, wod_by_mode, wod_by_modality, wod_amrap, wod_emom, wod_rt, wod_strength, wod_time, \
    wod_modality

# Set up Updater and Dispatcher

# updater = Updater(token=os.environ['TOKEN'])
updater = Updater('370932219:AAGXeZFMAuY9vJYSt5qns274i1von1cvY4I')
updater.stop()
dispatcher = updater.dispatcher

# Add logging

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.WARNING)

TIME, NOTIME = range(2)


def event_button(bot, update, user_data):
    """
    Get a User selected event from call back, add User to attendees list for the event
    and gives User info about selected event (date, time, location)
    :param bot: telegram API object
    :param update: telegram API state
    :return: N/A
    """
    logging.critical("event_button")
    logging.critical(user_data)
    query = update.callback_query
    connection = pymongo.MongoClient(os.environ['MONGODB_URI'])
    db = connection["heroku_r261ww1k"]
    action = query.data.split(";")[0]
    if action[0] == "0":
        event_id = query.data.split(";")[1]
        event = db.trains.find_one({"id": event_id})
        if action == "001":
            if "attendee" not in event.keys() or query.message.chat.username not in event["attendee"]:
                db.trains.update({"id": event_id}, {"$push": {"attendee": query.message.chat.username}}, upsert=True)
                bot.sendMessage(text="–û—Ç–ª–∏—á–Ω–æ, –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!", chat_id=query.message.chat_id)
                if event["start"]["dateTime"].split("T")[1][:5] != "00:00":
                    bot.sendMessage(text="–ñ–¥–µ–º —Ç–µ–±—è {} –≤ {}".format(event["start"]["dateTime"].split("T")[0],
                                                                    event["start"]["dateTime"].split("T")[1][:5]),
                                    chat_id=query.message.chat_id)
                else:
                    bot.sendMessage(text="–ñ–¥–µ–º —Ç–µ–±—è {}".format(event["start"]["dateTime"].split("T")[0]),
                                    chat_id=query.message.chat_id)
            else:
                bot.sendMessage(
                    text="–¢—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –ò–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π!? –°–∫–∞–∂–∏ —Ç—Ä–µ–Ω–µ—Ä—É –æ–± —ç—Ç–æ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º üòâ",
                    chat_id=query.message.chat_id)
        elif action == "002":
            event_loc(bot, query, event)
        elif action == "003":
            text = event_info(bot, update, event)
            bot.sendMessage(text=text, chat_id=query.message.chat_id)
        elif action == "004":
            try:
                event["attendee"].remove(query.message.chat.username)
                db.trains.update({"id": event_id}, {"$set": {"attendee": event["attendee"]}})
                bot.sendMessage(text="–ñ–∞–ª—å. –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ —Ç–æ –ø–æ–¥–æ–π—Ç–µ—Ç —Ç–µ–±–µ.",
                                chat_id=query.message.chat_id)
            except Exception as exc:
                logging.exception(exc)
        else:
            pass
    elif action[0] == "1":
        event_id = query.data.split(";")[1]
        event = db.events.find_one({"id": event_id})
        if action == "101":
            if "attendee" not in event.keys() or query.message.chat.username not in event["attendee"]:
                db.events.update({"id": event_id}, {"$push": {"attendee": query.message.chat.username}}, upsert=True)
                bot.sendMessage(text="–û—Ç–ª–∏—á–Ω–æ, –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!", chat_id=query.message.chat_id)
                if event["start"]["dateTime"].split("T")[1][:5] != "00:00":
                    bot.sendMessage(text="–ñ–¥–µ–º —Ç–µ–±—è {} –≤ {}".format(event["start"]["dateTime"].split("T")[0],
                                                                    event["start"]["dateTime"].split("T")[1][:5]),
                                    chat_id=query.message.chat_id)
                else:
                    bot.sendMessage(text="–ñ–¥–µ–º —Ç–µ–±—è {}".format(event["start"]["dateTime"].split("T")[0]),
                                    chat_id=query.message.chat_id)
            else:
                bot.sendMessage(
                    text="–¢—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.", chat_id=query.message.chat_id)
        elif action == "102":
            event_loc(bot, query, event)
        elif action == "103":
            text = event_info(bot, update, event)
            bot.sendMessage(text=text, chat_id=query.message.chat_id)
        elif action == "104":
            try:
                event["attendee"].remove(query.message.chat.username)
                db.events.update({"id": event_id}, {"$set": {"attendee": event["attendee"]}})
                bot.sendMessage(text="–ñ–∞–ª—å. –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ —Ç–æ –ø–æ–¥–æ–π—Ç–µ—Ç —Ç–µ–±–µ.",
                                chat_id=query.message.chat_id)
            except Exception as exc:
                logging.exception(exc)
        else:
            pass
    elif action[0] == "2":
        events = list()
        if action == "201":
            for train in db.trains.find({}):
                if "attendee" in train.keys() and query.message.chat.username in train["attendee"]:
                    events.append(train["id"])
            if len(events) > 0:
                bot.sendMessage(text="–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:", chat_id=query.message.chat_id)
                for train_id in events:
                    train = db.trains.find_one({"id": train_id})
                    if train["start"]["dateTime"].split("T")[1][:5] == "00:00":
                        bot.sendMessage(
                            text="{}: {}".format(train["start"]["dateTime"].split("T")[0], train["summary"]),
                            chat_id=query.message.chat_id)
                    else:
                        bot.sendMessage(
                            text="{}: {} —Å {} –¥–æ {}".format(train["start"]["dateTime"].split("T")[0], train["summary"],
                                                            train["start"]["dateTime"].split("T")[1][:5],
                                                            train["end"]["dateTime"].split("T")[1][:5]),
                            chat_id=query.message.chat_id)
            else:
                bot.sendMessage(text="–¢—ã –Ω–∏–∫—É–¥–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è(–ª–∞—Å—å)", chat_id=query.message.chat_id)
        elif action == "202":
            for event in db.events.find({}):
                if "attendee" in event.keys() and query.message.chat.username in event["attendee"]:
                    events.append(event["id"])
            if len(events) > 0:
                bot.sendMessage(text="–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:", chat_id=query.message.chat_id)
                for event_id in events:
                    event = db.events.find_one({"id": event_id})
                    if event["start"]["dateTime"].split("T")[1][:5] == "00:00":
                        bot.sendMessage(
                            text="{}: {}".format(event["start"]["dateTime"].split("T")[0], event["summary"]),
                            chat_id=query.message.chat_id)
                    else:
                        bot.sendMessage(
                            text="{}: {} —Å {} –¥–æ {}".format(event["start"]["dateTime"].split("T")[0], event["summary"],
                                                            event["start"]["dateTime"].split("T")[1][:5],
                                                            event["end"]["dateTime"].split("T")[1][:5]),
                            chat_id=query.message.chat_id)
            else:
                bot.sendMessage(text="–¢—ã –Ω–∏–∫—É–¥–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è(–ª–∞—Å—å)", chat_id=query.message.chat_id)
        else:
            pass
    elif action[0] == "3":
        if action == "301":
            wod_by_mode(bot, update)
        elif action == "303":
            wod_info(bot, update)
        elif action == "311":
            wod_emom(bot, update)
        elif action == "321":
            wod_amrap(bot, update)
        elif action == "331":
            wod_rt(bot, update)
        elif action == "341":
            wod_time(bot, update)
        elif action == "351":
            wod_strength(bot, update)
        elif action == "302":
            wod_by_modality(bot, update)
        elif action == "312":
            modality_str = query.data.split(";")[1]
            modality = modality_str.split(", ")
            wod_modality(bot, update, modality)
        else:
            pass
    elif action == "401":
        bot.sendMessage(text="–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.", chat_id=query.message.chat_id)
        bot.sendMessage(text="–í—ã–±–∏—Ä–∞–µ–º [–ù–∞—Å—Ç—Ä–æ–π–∫–∏].", chat_id=query.message.chat_id)
        bot.sendPhoto(
            photo="http://telegram-online.ru/wp-content/uploads/2015/11/kak-ustanovit-ili-pomenyat-imya-v-telegram-1-576x1024.jpg",
            chat_id=query.message.chat_id)
        bot.sendMessage(text="–ö–ª–∏–∫–∞–µ–º –Ω–∞ –Ω–∞–¥–ø–∏—Å—å '–ù–µ –∑–∞–¥–∞–Ω–æ'.", chat_id=query.message.chat_id)
        bot.sendPhoto(
            photo="http://telegram-online.ru/wp-content/uploads/2015/11/kak-ustanovit-ili-pomenyat-imya-v-telegram-2-576x1024.jpg",
            chat_id=query.message.chat_id)
        bot.sendMessage(text="–ü–∏—à–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –Ω–∏–∫ –∏ –∂–º–µ–º –≥–∞–ª–æ—á–∫—É –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É.",
                        chat_id=query.message.chat_id)
        bot.sendPhoto(
            photo="http://telegram-online.ru/wp-content/uploads/2015/11/kak-ustanovit-ili-pomenyat-imya-v-telegram-3.jpg",
            chat_id=query.message.chat_id)
    elif action == "wod_emom":
        wod_emom(bot, update)
    elif action == "wod_amrap":
        wod_amrap(bot, update)
    elif action == "wod_rt":
        wod_rt(bot, update)
    elif action == "wod_time":
        wod_time(bot, update)
    elif action == "wod_strength":
        wod_strength(bot, update)
    elif action == "wod_modality":
        wod_modality(bot, update, query.data.split(";")[1].split(", "))
    elif action == "501":
        whiteboard_results(bot, update, query.data.split(";")[1])
    else:
        pass
    connection.close()


def whiteboard(bot, update):
    logging.critical("whiteboard")
    if update.message.chat.type in ["group", "supergroup", "channel"]:
        bot.sendMessage(text="–ù–µ-–Ω–µ, –≤ –≥—Ä—É–ø–ø–∞—Ö —è –æ—Ç–∫–∞–∑—ã–≤–∞—é—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å, —è —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π. –ü–∏—à–∏ –º–Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ç-–∞-—Ç–µ—Ç üòâ",
                        chat_id=update.message.chat.id)
        return

    connection = pymongo.MongoClient(os.environ['MONGODB_URI'])
    db = connection["heroku_r261ww1k"]

    if db.benchmarks.find({}).count() == 0:
        bot.sendMessage(text="–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –Ω–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏", chat_id=update.message.chat_id)
        return

    benchmarks = db.benchmarks.find({})
    kb = []
    for benchmark in benchmarks:
        button = telegram.InlineKeyboardButton(text=benchmark["name"], callback_data="501;" + benchmark["name"])
        kb.append([button])
    kb_markup = telegram.InlineKeyboardMarkup(kb)
    update.message.reply_text(text="–í—ã–±–∏—Ä–∞–π –∫–æ–º–ø–ª–µ–∫—Å:", reply_markup=kb_markup)
    connection.close()


def whiteboard_results(bot, update, benchmark_name):
    logging.critical("whiteboard_results")
    connection = pymongo.MongoClient(os.environ['MONGODB_URI'])
    db = connection["heroku_r261ww1k"]
    benchmark = db.benchmarks.find_one({"name": benchmark_name})
    bot.sendMessage(text=benchmark["name"], chat_id=update.callback_query.message.chat.id)
    bot.sendMessage(text=benchmark["description"], chat_id=update.callback_query.message.chat.id)
    if len(benchmark["results"]) == 0:
        bot.sendMessage(text="–ï—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!",
                        chat_id=update.callback_query.message.chat.id)
    else:
        for man in benchmark["results"]:
            bot.sendMessage(text="@" + man["name"] + ":\t" + man["result"],
                            chat_id=update.callback_query.message.chat.id)
    connection.close()
    bot.sendMessage(text="–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è?", chat_id=update.callback_query.message.chat.id)
    return TIME


def whiteboard_add(bot, update, benchmark_name, user_data):
    logging.critical("whiteboard_add")
    logging.critical(TIME, NOTIME)
    logging.critical(update.message.text)
    logging.critical(user_data)
    connection = pymongo.MongoClient(os.environ['MONGODB_URI'])
    db = connection["heroku_r261ww1k"]
    benchmark = db.benchmarks.find_one({"name": benchmark_name})
    db.benchmarks.update({"name": benchmark["name"]},
                         {"$pull": {"results": {"name": update.callback_query.message.chat.username}}})
    db.benchmarks.update({"name": benchmark["name"]}, {"$push": {
        "results": {"$each": [{"name": update.callback_query.message.chat.username, "result": "0:00"}], "$sort": 1}}})
    connection.close()


def cancel(bot, update):
    logging.critical("cancel")
    bot.sendMessage(text="–≠—Ç–æ –Ω–µ –≤—Ä–µ–º—è, –∞ —á—Ç–æ —Ç–æ –µ—â–µ...", chat_id=update.message.chat.id)

    return ConversationHandler.END


def graceful(signum, frame):
    """
    Graceful exit
    :param signum: Signal number
    :param frame: Frame
    :return: N/A
    """

    print("Got CTRL+C")
    exit(0)


def error(bot, update, error):
    logging.critical('Update "%s" caused error "%s"' % (update, error))


def main():
    """
    Main function
    :return: N/A
    """

    # Graceful exit

    signal.signal(signal.SIGINT, graceful)

    # Set up handlers and buttons

#    start_handler = CommandHandler("start", start)
#    dispatcher.add_handler(start_handler)

#    train_handler = CommandHandler("train", train)
#    dispatcher.add_handler(train_handler)

#    train_handler = CommandHandler("attendees", attendees)
#    dispatcher.add_handler(train_handler)

#    wod_handler = CommandHandler("wod", wod)
#    dispatcher.add_handler(wod_handler)

#    whiteboard_handler = CommandHandler("whiteboard", whiteboard)
#    dispatcher.add_handler(whiteboard_handler, group=0)

#    calendar_handler = CommandHandler("calendar", calendar)
#    dispatcher.add_handler(calendar_handler)

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("whiteboard", whiteboard)],
        states={
            TIME: [RegexHandler('^[0-9]+:[0-5][0-9]$', whiteboard_add, pass_user_data=True)],
            NOTIME: [MessageHandler(Filters.text, whiteboard_add, pass_user_data=True)],
        },

        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )
    dispatcher.add_handler(conv_handler, group=0)

    updater.dispatcher.add_handler(CallbackQueryHandler(event_button, pass_user_data=True))

    # log all errors
#    updater.dispatcher.add_error_handler(error)

    # Poll user actions

    updater.start_polling()
    updater.idle()

    starttime = time.time()

    while True:
        # Dump events from Google Calendar and update MongoDB

        train_calendar = os.environ['TRAIN_CALENDAR_ID']
        trains = dump_calendar(train_calendar, 10)
        dump_mongodb("trains", trains)

        # Dump events from Google Calendar and update MongoDB

        events_calendar = os.environ['EVENTS_CALENDAR_ID']
        events = dump_calendar(events_calendar, 30)
        dump_mongodb("events", events)

        # Sleep to 60 secs

        time.sleep(60.0 - ((time.time() - starttime) % 60.0))


if __name__ == '__main__':
    # DOC: https://core.telegram.org/bots/api
    main()
